non#virtual inheritance pattern - Using a ordinary method in an interface to make a virtual call;
abstract base class - class with at least one pure virtual function;
interface class - class that provides only only an interface that will be used polymorphically;
abstraction - separating implementation from interface;
encapsulation - protect implementation from interface;
fat interface - base class has many more virtual functions than any derived class will implement;
downcast - casting from base class to derived class;
upcast - casting from derived class to base class;
suicide object - delete this;
construction order - top down;
destruction order - bottom up;
factory - class which insulates client from object creation;
mixin - object inherted from purely for functionality, usually multiple inherited;
cross#cast - casting from one base class to a different base class (when multiple inherited);
virtual inheritance - a solution to diamond inheritance;
RTTI - runtime information about a type;
unchecked cast - static_cast;
checked cast - dynamic_cast;
capability class - class which can be casted to to determine features of an object;